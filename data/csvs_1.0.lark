// https://digital-preservation.github.io/csv-schema-1.0.html
%import common.WS
%ignore WS
start: prolog body // 1
prolog: version_decl global_directives // 2
version_decl: "version 1.0" // 3
global_directives: ( separator_directive | quoted_directive | total_columns_directive | no_header_directive | ignore_column_name_case_directive )* // 4
directive_prefix: "@" // 5
separator_directive: directive_prefix "separator" ( separator_tab_expr | separator_char ) // 6
separator_tab_expr: "TAB" | "\\t" // 7
separator_char: character_literal // 8
quoted_directive: directive_prefix "quoted" // 9
total_columns_directive: directive_prefix "totalColumns" positive_non_zero_integer_literal// 10
no_header_directive: directive_prefix "noHeader" // 11
ignore_column_name_case_directive: directive_prefix "ignoreColumnNameCase" // 12
body: body_part+ // 13
body_part: column_definition // 14
column_definition: (column_identifier | quoted_column_identifier) ":" column_rule // 18
column_identifier: positive_non_zero_integer_literal | ident // 19
quoted_column_identifier: string_literal // 20
column_rule: column_validation_expr* column_directives // 21
column_directives: ( optional_directive | match_is_false_directive | ignore_case_directive | warning_directive )* // 22
optional_directive: directive_prefix "optional" // 23
match_is_false_directive: directive_prefix "matchIsFalse" // 24
ignore_case_directive: directive_prefix "ignoreCase" // 25
warning_directive: directive_prefix "warningDirective" // 26
column_validation_expr: combinatorial_expr | non_combinatorial_expr // 27
combinatorial_expr: or_expr | and_expr // 28
or_expr: non_combinatorial_expr "or" column_validation_expr // 29
and_expr: non_combinatorial_expr "and" column_validation_expr // 30
non_combinatorial_expr: non_conditional_expr | conditional_expr // 31
non_conditional_expr: single_expr | external_single_expr | parenthesized_expr // 32
single_expr: explicit_context_expr? ( is_expr | not_expr | in_expr | starts_with_expr | ends_with_expr | reg_exp_expr | range_expr | length_expr | empty_expr | not_empty_expr | unique_expr | uri_expr | xsd_date_time_expr | xsd_date_expr | xsd_time_expr | uk_date_expr | date_expr| partial_uk_date_expr | partial_date_expr | uuid4_expr | positive_integer_expr ) // 33  
explicit_context_expr: column_ref "/" // 34
column_ref: "$" ( column_identifier | quoted_column_identifier ) // 35
is_expr: "is(" string_provider ")" // 36
not_expr: "not(" string_provider ")" // 37
in_expr: "in(" string_provider ")" // 38
starts_with_expr: "starts(" string_provider ")" // 39
ends_with_expr: "ends(" string_provider ")" // 40
reg_exp_expr: "regex(" string_literal ")" // 41
range_expr: "range(" numeric_literal "," numeric_literal ")" // 42
length_expr: "length(" ( positive_integer_or_any ",")? positive_integer_or_any ")" // 43
positive_integer_or_any: positive_integer_literal | wildcard_literal // 44
empty_expr: "empty" // 45
not_empty_expr: "notEmpty" // 46
unique_expr: "unique" // 47
uri_expr: "uri" // 48
xsd_date_time_expr: "xDateTime" ("(" xsd_date_time_literal "," xsd_date_time_literal ")")? // 49
xsd_date_expr: "xDate" ("(" xsd_date_literal "," xsd_date_literal ")")? // 50
xsd_time_expr: "xTime" ( "(" xsd_time_literal "," xsd_time_literal ")")? // 51
uk_date_expr: "ukDate" ("(" uk_date_literal "," uk_date_literal ")") // 52
date_expr: "date(" string_provider "," string_provider "," string_provider ("," xsd_date_literal "," xsd_date_literal)? ")" // 53
partial_uk_date_expr: "partUkDate" // 54
partial_date_expr: "partDate(" string_provider "," string_provider "," string_provider ")" // 55
uuid4_expr: "uuid4" // 56
positive_integer_expr: "positiveInteger" // 57
string_provider: column_ref | string_literal // 58
external_single_expr: explicit_context_expr? (file_exists_expr | checksum_expr | file_count_expr) // 59
file_exists_expr: "fileExists" ("(" string_provider ")")? // 60
checksum_expr: "checksum(" file_expr "," string_literal ")" // 61
file_expr: "file(" (string_provider "," )? string_provider ")" // 62
file_count_expr: "fileCount(" file_expr ")" // 63
parenthesized_expr: "(" column_validation_expr+ ")" // 64
conditional_expr: if_expr // 65
if_expr: "if(" ( combinatorial_expr | non_conditional_expr ) "," column_validation_expr+ ("," column_validation_expr+)? ")" // 66

xsd_date_time_literal: xsd_date_without_timezone_component "T" xsd_time_literal // 67
xsd_date_literal: xsd_date_without_timezone_component xsd_timezone_component // 68
xsd_time_literal: xsd_time_without_timezone_component xsd_timezone_component // 69
xsd_date_without_timezone_component: /-?[0-9]{4}-(((0(1|3|5|7|8)|1(0|2))-(0[1-9]|(1|2)[0-9]|3[0-1]))|((0(4|6|9)|11)-(0[1-9]|(1|2)[0-9]|30))|(02-(0[1-9]|(1|2)[0-9])))/ // 70
xsd_time_without_timezone_component: /([0-1][0-9]|2[0-4]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3})?/ // 71
xsd_timezone_component: /((\+|-)(0[1-9]|1[0-9]|2[0-4]):(0[0-9]|[1-5][0-9])|Z)/ // 72
uk_date_literal: /(((0[1-9]|(1|2)[0-9]|3[0-1])\/(0(1|3|5|7|8)|1(0|2)))|((0[1-9]|(1|2)[0-9]|30)\/(0(4|6|9)|11))|((0[1-9]|(1|2)[0-9])\/02))\/[0-9]{4}/ // 73
positive_non_zero_integer_literal: /[1-9][0-9]*/ // 74
positive_integer_literal: /[0-9]+/ // 75
numeric_literal: /-?[0-9]+(\.[0-9]+)?/ // 76
//string_literal: /"\"" [^"]* "\""/ // 77
%import common.ESCAPED_STRING
string_literal: ESCAPED_STRING
character_literal: /[^\r']/ // 78
wildcard_literal: /"*"/ // 79
ident: /[A-Za-z0-9\-_\.]+/ // 80

